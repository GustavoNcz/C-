// COLA
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>
 
struct agenda
{
    char nombre[50];
    char telefono[25];
    char mail[50];
};
 
struct nodo
{
    struct agenda dato;
    struct nodo *proximo;
};

struct nodo *nuevonodo()
{
    struct nodo *p;
    p=(struct nodo *)malloc(sizeof(struct nodo));
    if(p==NULL)
    {
        printf("Memoria RAM Llena");
        getch();
        exit(0);
    }
    return p;
}

 
struct nodo *creacola(struct nodo *ult, struct agenda x)
{
    struct nodo *p;
    p=nuevonodo();
    (*p).dato=x;
    (*p).proximo=NULL;
    if(ult!=NULL) (*ult).proximo=p; // Si hay nodo anterior en prox pongo la direccion del nodo actual
    return p;
}

 
int colavacia(struct nodo *pri)
{
    if(pri==NULL) return 1;
    else return 0;
}

 
void mostrar(struct nodo *pri)
{
    struct nodo *aux;
    while(pri!=NULL)
    {
        printf("Nombre: %s - Telefono: %s - Mail: %s \n",pri->dato.nombre,pri->dato.telefono,pri->dato.mail);
        aux=pri;
        pri=(*pri).proximo;
        free(aux);
    }
    getch();
}
 

void main()
{
    struct nodo *pri=NULL, *ult=NULL;
    struct agenda x;
    printf("Ingrese nombre: ");
    gets(x.nombre);
    while(strcmpi(x.nombre,"fin"))
    {
        printf("Ingrese telefono: ");
        gets(x.telefono);
        printf("Ingrese mail: ");
        gets(x.mail);
        ult=creacola(ult,x);
        if(pri==NULL) pri=ult; // Si es la 1º pasada pongo en pri el valor del primer nodo
        printf("Ingrese nombre: ");
        gets(x.nombre);
    }
    if(colavacia(pri)==1) { printf("No se ingresaron registros"); getch(); }
    else mostrar(pri);
}
 
//VECTOR

#include <iostream>
#include <vector>

using namespace std;

int main()
{
    //vector de 20 elementos int inicializados a 9
    vector<int> A(20,9);
    //vector B sin inicializar
    vector<int> B;

    //copiamos el contenido de A en B
    B=A;

    return 0;
}


//PILA

#include <stdlib.h>
#include <stdio.h>
 
typedef struct _nodo {
   int valor;
   struct _nodo *siguiente;
} tipoNodo;


void Push(Pila *pila, int v) {
   pNodo nuevo;
 
   /* Crear un nodo nuevo */
   nuevo = (pNodo)malloc(sizeof(tipoNodo));
   nuevo->valor = v;
   
   /* Añadimos la pila a continuación del nuevo nodo */
   nuevo->siguiente = *pila;
   /* Ahora, el comienzo de nuestra pila es en nuevo nodo */
   *pila = nuevo;
}

int Pop(Pila *pila) {
   pNodo nodo; /* variable auxiliar para manipular nodo */
   int v;      /* variable auxiliar para retorno */
   
   /* Nodo apunta al primer elemento de la pila */
   nodo = *pila;
   if(!nodo) return 0; /* Si no hay nodos en la pila retornamos 0 */
   /* Asignamos a pila toda la pila menos el primer elemento */
   *pila = nodo->siguiente;
   /* Guardamos el valor de retorno */
   v = nodo->valor; 
   /* Borrar el nodo */
   free(nodo);
   return v;
}


/* Funciones con pilas: */
void Push(Pila *l, int v);
int Pop(Pila *l);
 
int main() {
   Pila pila = NULL;
 
   Push(&pila, 20);
   Push(&pila, 10);
   printf("%d, ", Pop(&pila));
   Push(&pila, 40);
   Push(&pila, 30);

   printf("%d, ", Pop(&pila));
   printf("%d, ", Pop(&pila));
   Push(&pila, 90);
   printf("%d, ", Pop(&pila));
   printf("%d\n", Pop(&pila));

   getchar();
   return 0;
}

